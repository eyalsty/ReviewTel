package com.example.springboot.controller;
import com.example.springboot.model.City;
import com.example.springboot.model.Country;
import com.example.springboot.model.Hotel;
import com.example.springboot.repository.CityRepository;
import com.example.springboot.repository.CountryRepository;
import com.example.springboot.repository.HotelRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.Collection;
import java.util.List;

@Controller // This means that this class is a Controller
 // This means URL's start with /demo (after Application path)
public class CityController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CountryRepository countryRepository;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    private CityRepository cityRepository;
    @Autowired
    private HotelRepository hotelRepository;
    @GetMapping(path = "/allCities")
    public @ResponseBody
    Iterable<String> getAllCountriesNames() {
        // This returns a JSON or XML with the users
        Collection<String> citiesList =  cityRepository.getAllCities();
        return citiesList;
    }


    @GetMapping(path = "/register2")
    public String showForm(Model model) {
        City city = new City();
        model.addAttribute("city", city);

        List<String> cityList = (List<String>) cityRepository.getAllCities();
        model.addAttribute("cityList", cityList);

        return "register_form";
    }

    @PostMapping("/chooseCity")
    public String greetingSubmit(@ModelAttribute City selectedCity, Model model) {
        Country country = new Country();
        model.addAttribute("country", country);

        List<Country> countryList = (List<Country>) countryRepository.findAll();
        model.addAttribute("countryList", countryList);

        City city = new City();
        model.addAttribute("city", city);

        List<City> cityList = (List<City>) cityRepository.findAll();
        model.addAttribute("cityList", cityList);

        Hotel hotel = new Hotel();
        model.addAttribute("hotel", hotel);

        List<Hotel> hotelList = (List<Hotel>) hotelRepository.getAllHotelsByCityId(Integer.parseInt(selectedCity.getName()));
        model.addAttribute("hotelList", hotelList);
        return "findHotelReviews";
    }

}