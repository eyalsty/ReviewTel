package com.example.springboot.controller;

import com.example.springboot.model.*;
import com.example.springboot.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
public class HotelController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CountryRepository countryRepository;

    @Autowired
    private CityRepository cityRepository;

    @Autowired
    private HotelRepository hotelRepository;
    @Autowired
    private ReviewRepository reviewRepository;

    @Autowired
    private GuestsCompositionRepository guestsCompositionRepository;

    @Autowired
    private RoomTypeRepository roomTypeRepository;

    @Autowired
    private TripTypeRepository tripTypeRepository;

    private int currentHotelId;

    // getting the names for all hotels
    @GetMapping(path = "/allHotelsNames")
    public @ResponseBody
    Iterable<String> getAllHotelsNames() {
        // This returns a JSON or XML with the users
        return hotelRepository.getAllHotelsNames();
    }

    // adding the list of reviews of selected hotel and the set the average of the hotel
    @PostMapping("/showReviewsWithAvg")
    public String chooseHotel(@ModelAttribute Hotel selectedHotel, Model model) {
        Integer hotel_id = selectedHotel.getId();
        selectedHotel = hotelRepository.findById(hotel_id).get();

        City selectedCity = cityRepository.findById(selectedHotel.getCity_id()).get();
        Country selectedCountry = countryRepository.findById(selectedCity.getCountry_id()).get();
        model.addAttribute("chosenHotelText", selectedHotel.getName() + " in " + selectedCity.getName() + ", " + selectedCountry.getName());

        List<Review> reviewsList = (List<Review>) reviewRepository.getAllReviewsByHotelId(selectedHotel.getId());
        List<ReviewUI> reviewUIList = new ArrayList<>();
        for (Review review : reviewsList) {
            ReviewUI reviewUI = new ReviewUI(review);
            Integer guestCompositionId = review.getGuests_composition_id();
            var optionalGuests_composition = guestsCompositionRepository.findById(guestCompositionId);
            if (optionalGuests_composition.isPresent()) {
                reviewUI.setGuests_composition(optionalGuests_composition.get().getGuests_composition());
            } else {
                reviewUI.setGuests_composition("N/A");
            }

            Integer room_type_id = review.getRoom_type_id();
            var optionalRoomT = roomTypeRepository.findById(room_type_id);
            if (optionalRoomT.isPresent()) {
                reviewUI.setRoom_type(optionalRoomT.get().getRoom_type());
            } else {
                reviewUI.setRoom_type("N/A");
            }

            Integer trip_type_id = review.getTrip_type_id();
            var optionalTripT = tripTypeRepository.findById(trip_type_id);
            if (optionalTripT.isPresent()) {
                reviewUI.setTrip_type(optionalTripT.get().getTrip_type());
            } else {
                reviewUI.setTrip_type("N/A");
            }

            reviewUIList.add(reviewUI);
        }
        //setting the average with double format as X.Y
        model.addAttribute("reviews", reviewUIList);
        double avg = reviewRepository.getAverageOfHotel(selectedHotel.getId());
        avg = avg * 10;
        int temp = (int) avg;
        avg = (double) temp / 10;
        String displayAvgText = "Hotel's average score: " + Double.toString(avg);
        model.addAttribute("avg", displayAvgText);
        if (Admin.getInstance().isConnected()) {
            return "Avg/showReviewsWithAvgForAdmin";
        }
        return "Avg/showReviewsWithAvg";
    }

    // adding list of nationalities and average score for selected hotel
    @PostMapping("/showHotelByNationality")
    public String showHotelByNationality(@ModelAttribute City selectedCity, Model model) {
        List<Object[]> topFiveObject = (List<Object[]>) hotelRepository.getByNationality(selectedCity.getId());
        List<GeneralObjWithAvg> nationalitiesAvg = new ArrayList<>();
        for (Object[] object : topFiveObject) {
            GeneralObjWithAvg nationalAvg = new GeneralObjWithAvg();
            nationalAvg.convert(object);
            nationalitiesAvg.add(nationalAvg);
        }

        model.addAttribute("nationalities", nationalitiesAvg);
        return "Nationality/showHotelByNationality";
    }

    // add ability to user in html to add review
    @PostMapping("/addReview")
    public String addReview(@ModelAttribute Hotel selectedHotel, Model model) {
        Review review = new Review();
        currentHotelId = selectedHotel.getId();
        model.addAttribute("review", review);
        ReviewUI reviewUI = new ReviewUI();
        model.addAttribute("reviewUI", reviewUI);
        List<Guests_composition> guests_compositionList = (List<Guests_composition>) guestsCompositionRepository.findAll();
        model.addAttribute("guests_compositionList", guests_compositionList);
        Country country = new Country();
        model.addAttribute("country", country);
        List<Country> countryList = (List<Country>) countryRepository.findAll();
        model.addAttribute("countryList", countryList);
        Room_type room_type = new Room_type();
        model.addAttribute("room_type", room_type);
        List<Room_type> room_typeList = (List<Room_type>) roomTypeRepository.findAll();
        model.addAttribute("room_typeList", room_typeList);
        Trip_type trip_type = new Trip_type();
        model.addAttribute("trip_type", trip_type);
        List<Trip_type> trip_typeList = (List<Trip_type>) tripTypeRepository.findAll();
        model.addAttribute("trip_typeList", trip_typeList);
        return "AddReview/addReview";
    }

    // notify user that review submitted
    @PostMapping("/addReviewSubmitted")
    public String chooseCountry(@ModelAttribute Review review, Model model) {
        review.setHotel_id(currentHotelId);
        java.sql.Date date = new java.sql.Date(System.currentTimeMillis());
        review.setDate(date);
        boolean insert = false;
        while(!insert)
        {
            try {
                reviewRepository.save(review);
                insert = true;
            }
            catch (Exception ex){}
        }

        return "reviewSubmitted";
    }
}