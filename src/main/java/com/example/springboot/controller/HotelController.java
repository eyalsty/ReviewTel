package com.example.springboot.controller;

import com.example.springboot.model.*;
import com.example.springboot.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
public class HotelController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CountryRepository countryRepository;

    @Autowired
    private CityRepository cityRepository;

    @Autowired
    private HotelRepository hotelRepository;
    @Autowired
    private ReviewRepository reviewRepository;

    @Autowired
    private GuestsCompositionRepository guestsCompositionRepository;

    @Autowired
    private RoomTypeRepository roomTypeRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewHotel(@RequestParam int id, @RequestParam String name
            , @RequestParam String address, @RequestParam int cityId) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Hotel hotel = new Hotel();
        hotel.setId(id);
        hotel.setName(name);
        hotel.setAddress(address);
        hotel.setCity_id(cityId);
        hotelRepository.save(hotel);
        return "Saved new hotel";
    }

    @GetMapping(path = "/allHotels")
    public @ResponseBody
    Iterable<Hotel> getAllHotels() {
        // This returns a JSON or XML with the users
        return hotelRepository.findAll();
    }
    @GetMapping(path = "/allHotelsNames")
    public @ResponseBody
    Iterable<String> getAllHotelsNames() {
        // This returns a JSON or XML with the users
        return hotelRepository.getAllHotelsNames();
    }

    @PostMapping("/showReviewsWithAvg")
    public String chooseHotel(@ModelAttribute Hotel selectedHotel, Model model) {
//        model.addAttribute("hotelName", selectedHotel.getName());
//        System.out.println(selectedHotel.getId());
//        System.out.println(selectedHotel.getName());
//        City selectedCity = cityRepository.findById(selectedHotel.getCity_id()).get();
//        model.addAttribute("cityName", selectedCity.getName());
//        Country selectedCountry = countryRepository.findById(selectedCity.getCountry_id()).get();
//        model.addAttribute("countryName", selectedCountry.getName());

        List<Review> reviewsList = (List<Review>) reviewRepository.getAllReviewsByHotelId(selectedHotel.getId());
        List<ReviewUI> reviewUIList = new ArrayList<>();
        for (Review review : reviewsList)
        {
            ReviewUI reviewUI = new ReviewUI(review);
            Integer guestCompositionId = review.getGuests_composition_id();
            var optionalGuests_composition = guestsCompositionRepository.findById(guestCompositionId);
            if (optionalGuests_composition.isPresent()) {
                reviewUI.setGuests_composition(optionalGuests_composition.get().getGuestsComposition());
            } else {
                reviewUI.setGuests_composition("N/A");
            }

            Integer room_type_id = review.getRoom_type_id();
            var optionalRoomT = roomTypeRepository.findById(room_type_id);
            if (optionalRoomT.isPresent()) {
                reviewUI.setRoom_type(optionalRoomT.get().getRoom_type());
            } else {
                reviewUI.setGuests_composition("N/A");
            }

            reviewUIList.add(reviewUI);

        }
        model.addAttribute("reviews", reviewUIList);
        double avg = reviewRepository.getAverageOfHotel(selectedHotel.getId());
        avg = avg*10;
        int temp = (int)avg;
        avg = (double)temp/10;
        String average = "Hotel's average score: " + Double.toString(avg);
        model.addAttribute("avg", average);
        return "showReviewsWithAvg";
    }


    @PostMapping("/showHotelByNationality")
    public String showHotelByNationality(@ModelAttribute City selectedCity, Model model) {
        List<Object[]> topFiveObject = (List<Object[]>) hotelRepository.getByNationality(selectedCity.getId());
        List<HotelAvg> nationalitiesAvg = new ArrayList<>();
        for( Object[] object : topFiveObject)
        {
            HotelAvg hotelAvg = new HotelAvg();
            hotelAvg.convert(object);
            nationalitiesAvg.add(hotelAvg);
        }

        model.addAttribute("nationalities", nationalitiesAvg);
        return "showHotelByNationality";
    }
}